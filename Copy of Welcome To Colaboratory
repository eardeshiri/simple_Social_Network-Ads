{"cells":[{"cell_type":"code","source":["%matplotlib\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import sklearn"],"metadata":{"id":"7n-e-JW78tH8","executionInfo":{"status":"ok","timestamp":1649837328781,"user_tz":-270,"elapsed":11,"user":{"displayName":"","userId":""}},"outputId":"2a213dca-94e6-4f36-e298-98ab637989ce","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Using matplotlib backend: agg\n"]}]},{"cell_type":"code","source":["dataset=pd.read_csv('Social_Network_Ads.csv')"],"metadata":{"id":"UmX5v2mz98Q3","executionInfo":{"status":"ok","timestamp":1649837335645,"user_tz":-270,"elapsed":515,"user":{"displayName":"","userId":""}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["x=dataset.iloc[:,:-1].values\n","y=dataset.iloc[:,-1].values"],"metadata":{"id":"i3VoadXP994g","executionInfo":{"status":"ok","timestamp":1649838412576,"user_tz":-270,"elapsed":418,"user":{"displayName":"","userId":""}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=0)"],"metadata":{"id":"fe6l3NLICE0j","executionInfo":{"status":"ok","timestamp":1649838600493,"user_tz":-270,"elapsed":398,"user":{"displayName":"","userId":""}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","sc=StandardScaler()\n","x_train=sc.fit_transform(x_train)\n","x_test=sc.fit_transform(x_test)"],"metadata":{"id":"dvlmvSyACyum","executionInfo":{"status":"ok","timestamp":1649838764533,"user_tz":-270,"elapsed":402,"user":{"displayName":"","userId":""}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["from sklearn.tree import DecisionTreeClassifier\n","classifier=DecisionTreeClassifier(criterion='entropy',random_state=0)\n","classifier.fit(x_train,y_train)"],"metadata":{"id":"JtLGJUicDaw3","executionInfo":{"status":"ok","timestamp":1649838957118,"user_tz":-270,"elapsed":471,"user":{"displayName":"","userId":""}},"outputId":"061fad8c-17b3-478f-ab3b-a9345209664d","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier(criterion='entropy', random_state=0)"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["print(classifier.predict(sc.transform([[30,87000]])))"],"metadata":{"id":"fqECchnZEJwR","executionInfo":{"status":"ok","timestamp":1649839038730,"user_tz":-270,"elapsed":6,"user":{"displayName":"","userId":""}},"outputId":"722afa60-7ebd-4b09-c0c2-9c746a406e0c","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["[0]\n"]}]},{"cell_type":"code","source":["y_pred=classifier.predict(x_test)"],"metadata":{"id":"hwRtC7U-EdtA","executionInfo":{"status":"ok","timestamp":1649839115569,"user_tz":-270,"elapsed":5,"user":{"displayName":"","userId":""}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix,accuracy_score\n","cm=confusion_matrix(y_test,y_pred)\n","print(cm)\n","accuracy_score(y_test,y_pred)"],"metadata":{"id":"5apP3aHSEwfQ","executionInfo":{"status":"ok","timestamp":1649839280945,"user_tz":-270,"elapsed":423,"user":{"displayName":"","userId":""}},"outputId":"d73993c7-1c2f-4cfe-b903-7440cd060dc4","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["[[61  7]\n"," [ 3 29]]\n"]},{"output_type":"execute_result","data":{"text/plain":["0.9"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["from matplotlib.colors import ListedColormap\n","x_set, y_set = sc.inverse_transform(x_train), y_train\n","x1, x2 = np.meshgrid(np.arange(start = x_set[:, 0].min() - 10, stop = x_set[:, 0].max() + 10, step = 0.25),np.arange(start = x_set[:, 1].min() - 1000, stop = x_set[:, 1].max() + 1000, step = 0.25))\n","x_set, y_set = sc.inverse_transform(x_train), y_train\n","x1, x2 = np.meshgrid(np.arange(start = x_set[:, 0].min() - 10, stop = x_set[:, 0].max() + 10, step = 0.25),np.arange(start = x_set[:, 1].min() - 1000, stop = x_set[:, 1].max() + 1000, step = 0.25))\n","plt.xlim(x1.min(), x1.max())\n","plt.ylim(x2.min(), x2.max())\n","for i, j in enumerate(np.unique(y_set)):\n","  plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\n","plt.title('Decision Tree Classification (Training set)')\n","plt.xlabel('Age')\n","plt.ylabel('Estimated Salary')\n","plt.legend()\n","plt.show()"],"metadata":{"id":"VweBg2NaFY2X","executionInfo":{"status":"ok","timestamp":1649840873783,"user_tz":-270,"elapsed":7356,"user":{"displayName":"","userId":""}},"outputId":"835c872d-d91c-45ec-84fc-5bef7479ff18","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":25,"outputs":[{"output_type":"stream","name":"stderr","text":["*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"]}]},{"cell_type":"code","source":["from matplotlib.colors import ListedColormap\n","x_set, y_set = sc.inverse_transform(x_test), y_test\n","x1, x2 = np.meshgrid(np.arange(start = x_set[:, 0].min() - 10, stop = x_set[:, 0].max() + 10, step = 0.25),np.arange(start = x_set[:, 1].min() - 1000, stop = x_set[:, 1].max() + 1000, step = 0.25))\n","plt.contourf(x1, x2, classifier.predict(sc.transform(np.array([x1.ravel(), x2.ravel()]).T)).reshape(x1.shape),alpha = 0.75, cmap = ListedColormap(('red', 'green')))\n","plt.xlim(x1.min(), x1.max())\n","plt.ylim(x2.min(), x2.max())\n","for i, j in enumerate(np.unique(y_set)):\n","    plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\n","plt.title('Decision Tree Classification (Test set)')\n","plt.xlabel('Age')\n","plt.ylabel('Estimated Salary')\n","plt.legend()\n","plt.show()"],"metadata":{"id":"FuVJfEsyG8Ld","executionInfo":{"status":"ok","timestamp":1649840857728,"user_tz":-270,"elapsed":41091,"user":{"displayName":"","userId":""}},"outputId":"82ebbedf-03c2-40ba-a9d7-8e5854c2c8d8","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":24,"outputs":[{"output_type":"stream","name":"stderr","text":["*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"uwGCW7IFJvrS"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"collapsed_sections":[],"name":"Copy of Welcome To Colaboratory","provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1649841574449}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}